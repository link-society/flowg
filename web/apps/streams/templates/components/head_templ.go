// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.771
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Head() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"application/javascript\" src=\"/static/js/apexcharts.min.js\"></script><script type=\"application/javascript\">\n    document.addEventListener('htmx:beforeSwap', () => {\n      if (window.chart !== undefined) {\n        window.chart.destroy()\n        window.chart = undefined\n      }\n    })\n\n    document.addEventListener('htmx:load', () => {\n      const inputOffset = document.getElementById('data_stream_timeoffset')\n      inputOffset.value = `${new Date().getTimezoneOffset()}`\n    })\n\n    document.addEventListener('htmx:load', () => {\n      const histogramElt  = document.getElementById('data_stream_histogram')\n      const histogramData = JSON.parse(histogramElt.dataset.timeserie)\n\n      if (window.chart !== undefined) {\n        window.chart.destroy()\n      }\n\n      window.chart = new ApexCharts(histogramElt, {\n        series: [\n          {\n            name: 'Logs',\n            data: histogramData,\n          },\n        ],\n        chart: {\n          type: 'bar',\n          width: '100%',\n          height: 150,\n          animations: {\n            enabled: false,\n          }\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n      })\n      window.chart.render()\n    })\n\n    document.addEventListener('htmx:load', () => {\n      const autoRefreshSelector = document.getElementById('data_stream_autorefresh')\n\n      if (window.autoRefreshToken !== undefined && window.autoRefreshToken !== null) {\n        clearTimeout(window.autoRefreshToken)\n      }\n\n      window.autoRefreshToken = null\n\n      const setupAutoRefresh = () => {\n        const autoRefreshInterval = parseInt(autoRefreshSelector.value) * 1000\n\n        if (window.autoRefreshToken) {\n          clearTimeout(window.autoRefreshToken)\n        }\n\n        if (autoRefreshInterval > 0) {\n          window.autoRefreshToken = setTimeout(\n            () => {\n              const form    = document.getElementById('form_stream')\n              const inputTo = document.getElementById('data_stream_to')\n\n              // <input type=\"datetime-local\" step=\"1\" />\n              // expects a value with the format \"YYYY-MM-DDTHH:MM:SS\"\n              const now = new Date()\n              const YYYY = now.getFullYear()\n              const mm = String(now.getMonth() + 1).padStart(2, '0')\n              const dd = String(now.getDate()).padStart(2, '0')\n              const HH = String(now.getHours()).padStart(2, '0')\n              const MM = String(now.getMinutes()).padStart(2, '0')\n              let SS = String(now.getSeconds()).padStart(2, '0')\n\n              // somehow, when SS is '00', the input is set to:\n              // 01/01/0001 00:00:00 ???\n              if (SS === '00') {\n                SS = '01'\n              }\n\n              inputTo.value = `${YYYY}-${mm}-${dd}T${HH}:${MM}:${SS}`\n\n              // form.submit() does not trigger the submit event\n              // and we want HTMX to catch it\n              form.dispatchEvent(new Event('submit'))\n            },\n            autoRefreshInterval,\n          )\n        }\n      }\n\n      // make sure the setup is done after the htmx:load is fully processed\n      setTimeout(setupAutoRefresh, 0)\n      autoRefreshSelector.addEventListener('change', setupAutoRefresh)\n    })\n  </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
