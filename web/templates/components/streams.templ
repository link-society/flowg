package components

import (
  "time"

	"link-society.com/flowg/internal/logstorage"
)

type streamSearchbarProps struct {
  From          time.Time
  To            time.Time
  Filter        string
  AutoRefresh   string
}

templ streamSearchbar(props streamSearchbarProps) {
  <form
    id="form_stream"
    hx-get=""
    hx-target="#stream_viewer"
    hx-swap="outerHTML"
    class="flex flex-row items-center gap-2 px-3 py-1 z-depth-1"
  >
    <input
      type="hidden"
      id="data_stream_timeoffset"
      name="timeoffset"
      value=""
    />

    <div class="flex-grow">
      <label for="data_stream_filter">Filter:</label>
      <input
        id="data_stream_filter"
        name="filter"
        type="text"
        value={props.Filter}
        placeholder='field = "value"'
      />
    </div>
    <div>
      <label for="data_stream_from">From:</label>
      <input
        id="data_stream_from"
        name="from"
        type="datetime-local"
        step="1"
        value={props.From.Format("2006-01-02T15:04:05")}
      />
    </div>
    <div>
      <label for="data_stream_to">To:</label>
      <input
        id="data_stream_to"
        name="to"
        type="datetime-local"
        step="1"
        value={props.To.Format("2006-01-02T15:04:05")}
      />
    </div>
    <div>
      <label for="data_stream_autorefresh">Auto Refresh:</label>
      <select id="data_stream_autorefresh" name="autorefresh">
        switch props.AutoRefresh {
        case "0":
          <option value="0" selected>No Auto Refresh</option>
          <option value="5">Every 5s</option>
          <option value="10">Every 10s</option>
          <option value="30">Every 30s</option>
          <option value="60">Every 1m</option>

        case "5":
          <option value="0">No Auto Refresh</option>
          <option value="5" selected>Every 5s</option>
          <option value="10">Every 10s</option>
          <option value="30">Every 30s</option>
          <option value="60">Every 1m</option>

        case "10":
          <option value="0">No Auto Refresh</option>
          <option value="5">Every 5s</option>
          <option value="10" selected>Every 10s</option>
          <option value="30">Every 30s</option>
          <option value="60">Every 1m</option>

        case "30":
          <option value="0">No Auto Refresh</option>
          <option value="5">Every 5s</option>
          <option value="10">Every 10s</option>
          <option value="30" selected>Every 30s</option>
          <option value="60">Every 1m</option>

        case "60":
          <option value="0">No Auto Refresh</option>
          <option value="5">Every 5s</option>
          <option value="10">Every 10s</option>
          <option value="30">Every 30s</option>
          <option value="60" selected>Every 1m</option>
        }
      </select>
    </div>
    <button type="submit" class="btn waves-effect waves-light ml-5">
      <i class="material-icons right">search</i>
      Run Query
    </button>
  </form>
}

templ streamHistogram(data string) {
  <div
    id="data_stream_histogram"
    data-timeserie={data}
    class="grey lighten-3 mt-1"
  ></div>
}

type StreamViewerProps struct {
  LogEntries    []logstorage.LogEntry
  Fields        []string
  From          time.Time
  To            time.Time
  Filter        string
  AutoRefresh   string
  HistogramData string

  Notifications []string
}

templ StreamViewer(props StreamViewerProps) {
  <div
    id="stream_viewer"
    class="col s10 h-full flex flex-col"
  >
    <div class="card-panel white p-0">
      @streamSearchbar(streamSearchbarProps{
        From:        props.From,
        To:          props.To,
        Filter:      props.Filter,
        AutoRefresh: props.AutoRefresh,
      })
      @streamHistogram(props.HistogramData)
    </div>
    <div
      class="
        card-panel white
        p-0 mb-0 h-0
        flex-grow flex-shrink
        overflow-auto
      "
    >
      <table class="w-full table-responsive logs highlight">
        <thead class="grey lighten-2 z-depth-1">
          <tr>
            <th class="text-center">Ingested At</th>
            for _, field := range props.Fields {
              <th class="font-monospace">{field}</th>
            }
          </tr>
        </thead>

        <tbody>
          for _, entry := range props.LogEntries {
            <tr>
              <td class="font-monospace">{entry.Timestamp.Format(time.RFC3339)}</td>

              for _, field := range props.Fields {
                if val, exists := entry.Fields[field]; exists {
                  <td class="font-monospace">
                    <p class="grey lighten-4 w-full px-1 m-0">{val}</p>
                  </td>
                } else {
                  <td></td>
                }
              }
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

  if props.Notifications != nil {
    for _, notification := range props.Notifications {
      <script
        type="application/javascript"
        data-message={notification}
      >
        (() => {
          const S = document.currentScript

          document.addEventListener('htmx:load', () => {
            setTimeout(() => {
              M.toast({
                html: S.dataset.message,
                completeCallback: () => S.remove(),
              });
            }, 1000);
          }, { once: true });
        })();
      </script>
    }
  }
}
