package views

import (
  "link-society.com/flowg/internal"
	"link-society.com/flowg/internal/auth"

  "link-society.com/flowg/web/templates/layouts"
)

templ pipelineHead(permissions auth.Permissions) {
  <link rel="stylesheet" href="/static/webcomponents/floweditor.bundle.css" />
  <script type="application/javascript" src="/static/webcomponents/floweditor.bundle.js"></script>
  if permissions.CanEditPipelines {
    <script type="application/javascript">
      document.addEventListener('DOMContentLoaded', () => {
        const action_save = document.getElementById('action_save')
        const data_pipeline_name = document.getElementById('data_pipeline_name')
        const data_pipeline_flow = document.getElementById('data_pipeline_flow')

        const add_node_fabs = document.querySelectorAll('.flowg-addnode-btn')
        for (const fab of add_node_fabs) {
          fab.addEventListener('click', (e) => {
            data_pipeline_flow.addNode(fab.dataset.nodetype)
          })
        }

        if (data_pipeline_name.value !== '') {
          history.pushState(null, '', `/web/pipelines/edit/${data_pipeline_name.value}/`)
        }

        action_save.addEventListener('click', () => {
          if (data_pipeline_name.value === '') {
            M.toast({ html: '❌ Please provide a pipeline name' })
            data_pipeline_name.classList.add('invalid')
          } else {
            const form = document.createElement('form')
            form.setAttribute('method', 'post')
            form.setAttribute('action', window.location.href)
            form.classList.add('hide')

            const input_name = document.createElement('input')
            input_name.setAttribute('type', 'hidden')
            input_name.setAttribute('name', 'name')
            input_name.setAttribute('value', data_pipeline_name.value)

            const input_flow = document.createElement('input')
            input_flow.setAttribute('type', 'hidden')
            input_flow.setAttribute('name', 'flow')
            input_flow.setAttribute('value', data_pipeline_flow.getAttribute('flow'))

            form.appendChild(input_name)
            form.appendChild(input_flow)
            document.body.appendChild(form)

            form.submit()
          }
        })

        data_pipeline_name.addEventListener('input', () => {
          data_pipeline_name.classList.remove('invalid')
        })
      });
    </script>
  }
}

templ pipelineToolbar(currentPipeline string, permissions auth.Permissions) {
  <div
    class="
      blue darken-1
      z-depth-1
      p-3
      flex flex-row items-center
    "
  >
    <div class="flex flex-row flex-grow items-center">
      <a
        class="btn-small blue"
        href={templ.SafeURL("https://github.com/link-society/flowg/blob/" + internal.FLOWG_VERSION + "/docs/README.md")}
        target="_blank"
      >
        <i class="material-icons left">help</i>
        Documentation
      </a>
    </div>
    <div class="flex flex-row items-center gap-3">
      if permissions.CanEditPipelines {
        if currentPipeline != "" {
          <a
            class="btn-small blue"
            href="/web/pipelines/new"
          >
            <i class="material-icons left">add</i>
            New
          </a>
          <a
            class="btn-small red"
            href={templ.SafeURL("/web/pipelines/delete/" + currentPipeline + "/")}
          >
            <i class="material-icons left">delete</i>
            Delete
          </a>
        }
        <button id="action_save" class="waves-effect waves-light btn-small">
          <i class="material-icons left">save</i>
          Save
        </button>
      }
    </div>
  </div>
}

type pipelineSideMenuProps struct {
  Pipelines      []string
  CurrentPipeline string
}

templ pipelineSideMenu(props pipelineSideMenuProps, permissions auth.Permissions) {
  <div class="col s2 h-full flex flex-col">
    if permissions.CanEditPipelines {
      if props.CurrentPipeline == "" {
        <div class="card-panel white flex-shrink">
          <div class="input-field m-0">
            <input
              id="data_pipeline_name"
              type="text"
            />
            <label for="data_pipeline_name">Pipeline Name</label>
          </div>
        </div>
      } else {
        <input
          type="hidden"
          id="data_pipeline_name"
          value={props.CurrentPipeline}
        />
      }
    }

    <div
      class="
        card-panel white
        p-0 mb-0 h-0
        flex-grow flex-shrink
        overflow-auto
      "
    >
      <div class="collection m-0">
        for _, pipeline := range props.Pipelines {
          if pipeline == props.CurrentPipeline {
            <a class="collection-item active" href="#">{pipeline}</a>
          } else {
            <a
              class="collection-item"
              href={templ.SafeURL("/web/pipelines/edit/" + pipeline + "/")}
            >
              {pipeline}
            </a>
          }
        }
      </div>
    </div>
  </div>
}

templ pipelineEditor(flow string) {
  <div class="col s10 h-full flex flex-col">
    <div
      class="
        card-panel white
        p-0 mb-0 h-0
        flex-grow flex-shrink
      "
    >
      <flow-editor id="data_pipeline_flow" flow={flow}></flow-editor>
    </div>
  </div>
}

templ pipelineFABs() {
  <div class="fixed-action-btn" style="margin-bottom: 5em;">
    <button class="btn-floating btn-large">
      <i class="large material-icons">add</i>
    </button>
    <ul>
      <li>
        <button
          class="btn-floating tooltipped blue flowg-addnode-btn"
          data-position="left"
          data-tooltip="Add Transform Node"
          data-nodetype="transform"
        >
          <i class="material-icons">filter_alt</i>
        </button>
      </li>
      <li>
        <button
          class="btn-floating tooltipped red flowg-addnode-btn"
          data-position="left"
          data-tooltip="Add Switch Node"
          data-nodetype="switch"
        >
          <i class="material-icons">device_hub</i>
        </button>
      </li>
      <li>
        <button
          class="btn-floating tooltipped purple flowg-addnode-btn"
          data-position="left"
          data-tooltip="Add Router Node"
          data-nodetype="router"
        >
          <i class="material-icons">storage</i>
        </button>
      </li>
    </ul>
  </div>
}

type PipelinesProps struct {
  Pipelines      []string
  CurrentPipeline string
  Flow            string
}

templ Pipelines(
  props         PipelinesProps,
  permissions   auth.Permissions,
  notifications []string,
) {
  @layouts.App(layouts.AppProps{
    Head:          pipelineHead(permissions),
    CurrentNav:    "pipelines",
    Permissions:   permissions,
    Notifications: notifications,
  }) {
    <div class="w-full h-full flex flex-col">
      <section class="row w-full mb-0">
        @pipelineToolbar(props.CurrentPipeline, permissions)
      </section>
      <section class="row w-full mb-0 flex-grow">
        @pipelineSideMenu(
          pipelineSideMenuProps{
            Pipelines:       props.Pipelines,
            CurrentPipeline: props.CurrentPipeline,
          },
          permissions,
        )
        @pipelineEditor(props.Flow)
      </section>
    </div>
    if permissions.CanEditPipelines {
      @pipelineFABs()
    }
  }
}
