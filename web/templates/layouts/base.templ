package layouts

type BaseProps struct {
  Head templ.Component
  Notifications []string
}

templ Base(props BaseProps) {
  <!DOCTYPE html>
  <html>
    <head>
      <title>FlowG</title>

      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />

      <link rel="stylesheet" href="/static/css/google-font-material-icons.css" />
      <link rel="stylesheet" href="/static/css/materialize.min.css" />
      <link rel="stylesheet" href="/static/css/utilities.css" />

      <script type="application/javascript" src="/static/js/materialize.patched.js"></script>
      <script type="application/javascript" src="/static/js/htmx.min.js"></script>

      <script type="application/javascript">
        document.addEventListener('htmx:load', (event) => {
          M.AutoInit(event.detail.elt)
        })
      </script>

      if props.Notifications != nil {
        for _, notification := range props.Notifications {
          <script
            type="application/javascript"
            data-message={notification}
          >
            (() => {
              const S = document.currentScript

              document.addEventListener('DOMContentLoaded', () => {
                setTimeout(() => {
                  M.toast({
                    html: S.dataset.message,
                    completeCallback: () => S.remove(),
                  })
                }, 150)
              })
            })()
          </script>
        }
      }

      if props.Head != nil {
        @props.Head
      }
    </head>
    <body class="blue-grey lighten-4 flex flex-col h-maxvh overflow-hidden">
      { children... }

      <div id="modal" class="modal">
        <div class="modal-content" id="modal-content">
          <h5>hello</h5>
        </div>
      </div>

      <script type="application/javascript">
        document.body.addEventListener('htmx-custom-modal-open', () => {
          const modalElement  = document.getElementById('modal')
          const modalInstance = M.Modal.getInstance(modalElement)
          modalInstance.open()
        })

        document.body.addEventListener('htmx-custom-modal-close', (event) => {
          const modalElement  = document.getElementById('modal')
          const modalInstance = M.Modal.getInstance(modalElement)
          modalInstance.close()

          if (event.detail.after === 'reload') {
            setTimeout(
              () => { window.location.reload() },
              150,
            )
          }
        })

        document.body.addEventListener('htmx-custom-toast', (event) => {
          for (const msg of event.detail.messages) {
            M.toast({ html: msg })
          }
        })
      </script>
    </body>
  </html>
}
