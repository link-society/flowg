---
name: release-package

on:
  release:
    types:
      - published

permissions:
  contents: write

jobs:
  docker:
    strategy:
      matrix:
        include:
          - ghrunner: ubuntu-latest
            docker_image_tag_suffix: ""
          - ghrunner: ubuntu-24.04-arm
            docker_image_tag_suffix: "-linux-arm"

    runs-on: ${{ matrix.ghrunner }}

    steps:
      - name: checkout@scm
        uses: actions/checkout@v4

      - name: setup@docker
        uses: docker/setup-buildx-action@v3

      - name: login@docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: build@docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/flowg.dockerfile
          tags: |
            linksociety/flowg:latest${{ matrix.docker_image_tag_suffix }}
            linksociety/flowg:${{ github.event.release.tag_name }}${{ matrix.docker_image_tag_suffix }}
          push: true
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  binary:
    strategy:
      matrix:
        include:
          - ghrunner: ubuntu-latest
            rstarget: x86_64-unknown-linux-gnu
            goos: linux
            goarch: amd64
          - ghrunner: ubuntu-24.04-arm
            rstarget: aarch64-unknown-linux-gnu
            goos: linux
            goarch: arm64
          - ghrunner: macos-latest
            rstarget: aarch64-apple-darwin
            goos: darwin
            goarch: arm64

    runs-on: ${{ matrix.ghrunner }}

    steps:
      - name: checkout@scm
        uses: actions/checkout@v4

      - name: setup@go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: setup@node
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: setup@rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.85.0
          target: ${{ matrix.rstarget }}

      - name: setup@upx
        if: ${{ matrix.goos != "darwin" }}
        run: |
          wget https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-${{ matrix.goarch }}_${{ matrix.goos }}.tar.xz
          tar xvf upx-5.0.0-${{ matrix.goarch }}_${{ matrix.goos }}.tar.xz
          sudo cp upx-5.0.0-${{ matrix.goarch }}_${{ matrix.goos }}/upx /usr/local/bin/

      - name: frontend@build
        working-directory: ./web/app
        run: |
          npm i
          NODE_ENV=production npm run build
          mkdir -p ../public
          cp -r ./dist/* ../public/

      - name: backend-ffi-vrl@build
        working-directory: ./internal/utils/ffi/vrl/rust-crate
        run: cargo build --release

      - name: backend-ffi-filterdsl@build
        working-directory: ./internal/utils/ffi/filterdsl/rust-crate
        run: cargo build --release

      - name: backend@build
        run: |
          go get ./...
          go generate ./...
          go build -ldflags="-s -w" -o bin/ ./...
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: compress@binary
        if: ${{ matrix.goos != "darwin" }}
        run: upx bin/*

      - name: upload@binary
        run: |
          tar -czf ${ARCHIVE_NAME} bin/ LICENSE.txt
          gh release upload ${RELEASE_NAME} ${ARCHIVE_NAME}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCHIVE_NAME: flowg-${{ github.event.release.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          RELEASE_NAME: ${{ github.event.release.tag_name }}
